---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  images: ImageMetadata[];
}

const { images } = Astro.props;
---

<div
  id='modal'
  class='fixed left-0 top-0 flex hidden h-full w-full bg-black bg-opacity-50 backdrop-blur-sm backdrop-filter'
>
  <div
    class='slider-wrapper m-auto flex w-full max-w-screen-xl flex-col p-4 sm:h-1/2 md:h-[90%]'
  >
    <!-- Header Section Controls -->
    <div class='flex w-full flex-row justify-between'>
      <!-- Left & Right Arrows -->
      <div class='flex flex-row items-center gap-4'>
        <button id='modal-back-button' class='-rotate-90 text-2xl text-white'
          >⇧</button
        >
        <div class='text-xl text-white' id='image-count'>1/4</div>
        <button id='modal-next-button' class='rotate-90 text-2xl text-white'
          >⇧</button
        >
      </div>
      <!-- X Close Button -->
      <button id='close-modal-button' class='mb-2 text-4xl text-white'>×</button
      >
    </div>
    <!-- Slider Images -->
    <div
      id='slider'
      class='scrollbar flex h-full w-full snap-x snap-mandatory items-start gap-10 overflow-x-auto overscroll-x-contain'
    >
      {
        images.map((image, index) => (
          <div class='image-container h-full w-full flex-shrink-0 snap-start overflow-y-auto'>
            <Image
              class='modal-image shadow-2xl'
              src={image}
              alt={`Image ${index + 1}`}
            />
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Modal navigation
  const modalImages = document.querySelectorAll('.modal-image');
  const totalImages = modalImages.length;
  const modal = document.getElementById('modal');
  const slider = modal ? (modal.querySelector('#slider') as HTMLElement) : null;
  const imageCount = document.getElementById('image-count');
  const modalNextButton = document.getElementById('modal-next-button');
  const modalBackButton = document.getElementById('modal-back-button');

  let currentIndex = 0;

  // Function to calculate and set the current image index based on scroll position
  function updateIndexOnScroll() {
    if (!slider || modalImages.length === 0) return;

    const imageWidth = modalImages[0].clientWidth + 40; // Adjust for gap
    currentIndex = Math.round(slider.scrollLeft / imageWidth);
    updateImageCount();
  }

  // Function to update the image count
  function updateImageCount() {
    if (imageCount) {
      imageCount.textContent = `${currentIndex + 1}/${totalImages}`;
    }

    // Conditionally style the back and next buttons
    if (modalBackButton) {
      modalBackButton.classList.toggle('opacity-50', currentIndex === 0);
    }
    if (modalNextButton) {
      modalNextButton.classList.toggle(
        'opacity-50',
        currentIndex === totalImages - 1,
      );
    }
  }

  // Function to navigate to the next image
  function goToNextImage() {
    if (currentIndex < totalImages - 1 && slider) {
      currentIndex++;
      slider.scrollLeft = currentIndex * (modalImages[0].clientWidth + 40); // Adjust for gap
      updateImageCount();
    }
  }

  // Function to navigate to the previous image
  function goToPreviousImage() {
    if (currentIndex > 0 && slider) {
      currentIndex--;
      slider.scrollLeft = currentIndex * (modalImages[0].clientWidth + 40); // Adjust for gap
      updateImageCount();
    }
  }

  // Event listeners for next and back buttons
  if (modalNextButton) {
    modalNextButton.addEventListener('click', (event) => {
      event.stopPropagation(); // Prevent closing the modal
      goToNextImage();
    });
  }
  if (modalBackButton) {
    modalBackButton.addEventListener('click', (event) => {
      event.stopPropagation(); // Prevent closing the modal
      goToPreviousImage();
    });
  }

  // Add event listener for arrow keys and escape key
  document.addEventListener('keydown', (event) => {
    if (modal?.classList.contains('hidden')) return; // Only listen if modal is open
    if (event.key === 'ArrowRight') {
      goToNextImage();
    }
    if (event.key === 'ArrowLeft') {
      goToPreviousImage();
    }
    if (event.key === 'Escape') {
      closeModal();
    }
  });

  // Scroll event listener to update index on manual scroll
  if (slider) {
    slider.addEventListener('scroll', updateIndexOnScroll);
  }

  // Initial display update
  updateImageCount();

  // Open modal
  const imageElements = document.querySelectorAll('.open-modal-button');

  function openModal(event: Event) {
    const modal = document.getElementById('modal');
    if (!modal) return;

    const slider = modal.querySelector('#slider');
    if (!slider) return;

    // Show the modal
    modal.classList.remove('hidden');

    // Get the clicked image index
    const target = event.target as HTMLElement;
    const index = Number(target.dataset.index);

    const image = slider.querySelector('img') as HTMLImageElement;
    const imageWidth = image ? image.clientWidth + 40 : 0; // Adjust 40 for gap

    // Scroll to the specific image in the slider
    slider.scrollLeft = index * imageWidth;
  }

  imageElements.forEach((imageElement) =>
    imageElement.addEventListener('click', openModal),
  );

  // Close modal
  const closeModalButton = document.getElementById('close-modal-button');

  function closeModal() {
    const modal = document.getElementById('modal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  const modalBackground = document.getElementById('modal');
  if (modalBackground) {
    modalBackground.addEventListener('click', closeModal);
  }

  if (closeModalButton) {
    closeModalButton.addEventListener('click', closeModal);
  }
</script>
