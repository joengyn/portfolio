---
interface Props {
  isIndex?: boolean;
  isAbout?: boolean;
}

const { isIndex, isAbout } = Astro.props;

import { Image } from 'astro:assets';
import Button from './Button.astro';
import logo from '../../public/circle.png';
import resume from '../../public/resume.pdf';
---

<header
  id='header'
  data-page-type={isIndex || isAbout ? 'no-scroll' : 'scroll'}
  class='fixed top-0 z-40 w-full bg-lightGray transition-transform duration-500 ease-in-out'
>
  <div class='flex flex-row items-center justify-between p-4 tracking-wider'>
    <!-- Name -->
    <a class='md:hidden' href='/'>JOE.<br />NGYN</a>
    <a
      class='relative -mx-1 hidden px-1 text-darkGray
        transition-[color,box-shadow] duration-700 ease-in-out
        before:absolute before:inset-0 before:z-[-1] before:h-full before:w-0
        before:bg-darkGray before:transition-all before:duration-300 before:ease-in-out
        hover:text-white hover:before:w-full md:block'
      href='/'>JOE.NGYN</a
    >
    <!-- Mobile Menu Button -->
    <button
      type='button'
      class='menu-button space-y-1 md:hidden'
      aria-label='Toggle navigation menu'
      aria-expanded='false'
      aria-controls='mobile-menu'
    >
      <div class='h-1 w-6 bg-black'></div>
      <div class='h-1 w-6 bg-black'></div>
      <div class='h-1 w-6 bg-black'></div>
    </button>
    <!-- Menu Links -->
    <div class='hidden items-center justify-end gap-3 md:flex'>
      <a
        class="relative inline-block
        before:absolute before:bottom-0 before:left-0 before:h-[2px] before:w-full before:origin-right
        before:scale-x-0 before:bg-darkGray before:transition-transform before:duration-300 before:content-['']
        hover:before:origin-left hover:before:scale-x-100"
        href='/'>work</a
      >
      <a
        class="relative inline-block
        before:absolute before:bottom-0 before:left-0 before:h-[2px] before:w-full before:origin-right
        before:scale-x-0 before:bg-darkGray before:transition-transform before:duration-300 before:content-['']
        hover:before:origin-left hover:before:scale-x-100"
        href='/about'>about</a
      >
      <a
        class="relative inline-block
        before:absolute before:bottom-0 before:left-0 before:h-[2px] before:w-full before:origin-right
        before:scale-x-0 before:bg-darkGray before:transition-transform before:duration-300 before:content-['']
        hover:before:origin-left hover:before:scale-x-100"
        target='_blank'
        href={resume}>resume</a
      >
      <a
          class='flex min-w-12 items-center gap-2 rounded-sm border-2 border-black px-4 py-2 shadow-[3px_3px_0px_1px_black] transition-colors duration-300 ease-in-out hover:bg-darkGray hover:text-white text-[12px] font-bold uppercase tracking-widest'
          href='mailto:joe.ngyn7@gmail.com'
        >
          Contact
        </a>
    </div>
    <!--  Logo -->
    <div class='absolute inset-0 z-[-1] flex items-center justify-center'>
      <Image
        src={logo}
        alt='logo'
        class={`h-10 w-10 ${isIndex ? 'opacity-0' : 'opacity-100'}`}
        id='logoHeader'
      />
    </div>
  </div>
  <div class='mx-4 border-t-2 border-black'></div>
</header>

<style></style>

<script>
  // Open Mobile Menu
  const menuButton = document.querySelector('.menu-button');

  function toggleMenu() {
    const mobileMenu = document.querySelector('.mobile-menu');
    const menuLink = document.querySelectorAll('.menu-link');
    const menuContact = document.querySelector('.menu-contact');
    const closeMenu = document.getElementById('close-menu');
    const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
    const newExpandedState = !isExpanded;

    // Toggle aria-expanded
    menuButton.setAttribute('aria-expanded', newExpandedState);

    // Update tabindex for menu items based on expanded state
    // This must happen BEFORE animation starts so items are tabbable when visible
    const tabindexValue = newExpandedState ? '0' : '-1';
    if (menuLink) {
      menuLink.forEach((link) => {
        link.setAttribute('tabindex', tabindexValue);
      });
    }
    if (menuContact) {
      menuContact.setAttribute('tabindex', tabindexValue);
    }
    if (closeMenu) {
      closeMenu.setAttribute('tabindex', tabindexValue);
      // Move focus to close button when opening, return to menu button when closing
      if (newExpandedState) {
        setTimeout(() => closeMenu.focus(), 100);
      }
    }

    // Animations for Mobile Menu
    if (mobileMenu) {
      if (newExpandedState) {
        // Opening menu - remove inert to make it interactive
        mobileMenu.removeAttribute('inert');
        mobileMenu.classList.remove('translate-x-full');
        mobileMenu.classList.add(
          'translate-x-0',
          'transition-transform',
          'duration-1000',
        );
      } else {
        // Closing menu - add inert to make it non-interactive
        mobileMenu.setAttribute('inert', '');
        mobileMenu.classList.remove('translate-x-0');
        mobileMenu.classList.add('translate-x-full');
      }
    }
    // Animations for Menu Links
    if (menuLink) {
      menuLink.forEach((link) => {
        if (newExpandedState) {
          link.classList.remove('translate-x-full');
          link.classList.add('translate-x-0');
        } else {
          link.classList.remove('translate-x-0');
          link.classList.add('translate-x-full');
        }
      });
    }
    // Animations for Menu Contact
    if (menuContact) {
      if (newExpandedState) {
        menuContact.classList.remove('translate-y-5');
        menuContact.classList.add('translate-y-0');
        menuContact.classList.remove('opacity-0');
        menuContact.classList.add('opacity-100');
      } else {
        menuContact.classList.remove('translate-y-0');
        menuContact.classList.add('translate-y-5');
        menuContact.classList.remove('opacity-100');
        menuContact.classList.add('opacity-0');
      }
    }
  }

  if (menuButton) {
    menuButton.addEventListener('click', toggleMenu);

    // Add keyboard support (Enter and Space)
    menuButton.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleMenu();
      }
    });

    // Monitor aria-expanded changes from MobileMenu and update tabindex
    const observer = new MutationObserver(() => {
      const isOpen = menuButton.getAttribute('aria-expanded') === 'true';
      const tabindexValue = isOpen ? '0' : '-1';
      const menuLink = document.querySelectorAll('.menu-link');
      const menuContact = document.querySelector('.menu-contact');
      const closeMenu = document.getElementById('close-menu');

      if (menuLink) {
        menuLink.forEach((link) => {
          link.setAttribute('tabindex', tabindexValue);
        });
      }
      if (menuContact) {
        menuContact.setAttribute('tabindex', tabindexValue);
      }
      if (closeMenu) {
        closeMenu.setAttribute('tabindex', tabindexValue);
      }
    });

    observer.observe(menuButton, { attributes: true, attributeFilter: ['aria-expanded'] });
  }

  // Header Scroll Animation for non index/about pages
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('header');
    if (!header) return;

    const pageType = header.dataset.pageType;

    if (pageType === 'no-scroll') {
      return;
    }

    // Apply transition classes once to the header
    header.classList.add('transition-transform', 'duration-500', 'ease-in-out');

    let lastScrollTop = 0;

    window.addEventListener('scroll', () => {
      const scrollTop = window.scrollY || document.documentElement.scrollTop;

      if (scrollTop > lastScrollTop) {
        // Scroll down
        header.style.transform = 'translateY(-100%)';
      } else {
        // Scroll up
        header.style.transform = 'translateY(0)';
      }

      lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // Prevent negative scrolling
    });
  });
</script>
