---
interface Props {
  isIndex?: boolean;
  isAbout?: boolean;
}

const { isIndex, isAbout } = Astro.props;

import { Image } from 'astro:assets';
import Button from './Button.astro';
import logo from '../../public/circle.webp';
import logoWhite from '../../public/circle-white.webp';
import resume from '../../public/resume.pdf';
---

<header
  id='header'
  data-page-type={isIndex || isAbout ? 'no-scroll' : 'scroll'}
  class='fixed top-0 z-40 w-full bg-lightGray text-inkBrown dark:bg-darkGray dark:text-pearl'
>
  <div class='flex flex-row items-center justify-between p-4 tracking-wider'>
    <!-- Name -->
    <a class='md:hidden' href='/'>JOE.<br />NGYN</a>
    <a class='hidden md:block' href='/'>JOE.NGYN</a>
    <!-- Mobile Menu Button -->
    <button
      type='button'
      class='menu-button space-y-1 md:hidden'
      aria-label='Toggle navigation menu'
      aria-expanded='false'
      aria-controls='mobile-menu'
    >
      <div class='h-1 w-6 bg-[#2B2520] dark:bg-[#FAF8F3]'></div>
      <div class='h-1 w-6 bg-[#2B2520] dark:bg-[#FAF8F3]'></div>
      <div class='h-1 w-6 bg-[#2B2520] dark:bg-[#FAF8F3]'></div>
    </button>
    <!-- Menu Links -->
    <div class='hidden items-center justify-end gap-3 md:flex'>
      <a href='/'>work</a>
      <a href='/about'>about</a>
      <a target='_blank' href={resume}>resume</a>
      <a
        class='flex min-w-12 items-center gap-2 rounded-sm border-2 border-charcoal dark:border-pearl px-4 py-2 shadow-[3px_3px_0px_1px] shadow-charcoal dark:shadow-pearl text-[12px] font-bold uppercase tracking-widest'
        href='mailto:joe.ngyn7@gmail.com'
      >
        Contact
      </a>
      <!-- Dark Mode Toggle -->
      <button
        id='theme-toggle'
        type='button'
        aria-label='Toggle dark mode'
        class='flex h-10 w-10 items-center justify-center'
      >
        <!-- Sun Icon (visible in light mode) -->
        <svg
          id='sun-icon'
          class='h-5 w-5'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z'
          ></path>
        </svg>
        <!-- Moon Icon (visible in dark mode) -->
        <svg
          id='moon-icon'
          class='hidden h-5 w-5'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'
          ></path>
        </svg>
      </button>
    </div>
    <!--  Logo -->
    <div class='absolute inset-0 z-[-1] flex items-center justify-center'>
      <Image
        src={logo}
        alt='logo'
        class={`h-10 w-10 ${isIndex ? 'opacity-0' : 'opacity-100'} dark:hidden`}
        id='logoHeader'
      />
      <Image
        src={logoWhite}
        alt='logo'
        class={`h-10 w-10 ${isIndex ? 'opacity-0' : 'opacity-100'} hidden dark:block`}
        id='logoHeaderDark'
      />
    </div>
  </div>
  <div class='mx-4 border-t-2 border-charcoal dark:border-pearl'></div>
</header>

<style></style>

<script>
  // Open Mobile Menu
  const menuButton = document.querySelector('.menu-button');

  function toggleMenu() {
    const mobileMenu = document.querySelector('.mobile-menu');
    const menuLink = document.querySelectorAll('.menu-link');
    const menuContact = document.querySelector('.menu-contact');
    const closeMenu = document.getElementById('close-menu');
    const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
    const newExpandedState = !isExpanded;

    // Toggle aria-expanded
    menuButton.setAttribute('aria-expanded', newExpandedState);

    // Update tabindex for menu items based on expanded state
    const tabindexValue = newExpandedState ? '0' : '-1';
    if (menuLink) {
      menuLink.forEach((link) => {
        link.setAttribute('tabindex', tabindexValue);
      });
    }
    if (menuContact) {
      menuContact.setAttribute('tabindex', tabindexValue);
    }
    if (closeMenu) {
      closeMenu.setAttribute('tabindex', tabindexValue);
      // Move focus to close button when opening
      if (newExpandedState) {
        setTimeout(() => closeMenu.focus(), 100);
      }
    }

    // Toggle mobile menu visibility
    if (mobileMenu) {
      if (newExpandedState) {
        // Opening menu - remove inert to make it interactive
        mobileMenu.removeAttribute('inert');
        mobileMenu.classList.remove('translate-x-full');
      } else {
        // Closing menu - add inert to make it non-interactive
        mobileMenu.setAttribute('inert', '');
        mobileMenu.classList.add('translate-x-full');
      }
    }
  }

  if (menuButton) {
    menuButton.addEventListener('click', toggleMenu);

    // Add keyboard support (Enter and Space)
    menuButton.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleMenu();
      }
    });

    // Monitor aria-expanded changes from MobileMenu and update tabindex
    const observer = new MutationObserver(() => {
      const isOpen = menuButton.getAttribute('aria-expanded') === 'true';
      const tabindexValue = isOpen ? '0' : '-1';
      const menuLink = document.querySelectorAll('.menu-link');
      const menuContact = document.querySelector('.menu-contact');
      const closeMenu = document.getElementById('close-menu');

      if (menuLink) {
        menuLink.forEach((link) => {
          link.setAttribute('tabindex', tabindexValue);
        });
      }
      if (menuContact) {
        menuContact.setAttribute('tabindex', tabindexValue);
      }
      if (closeMenu) {
        closeMenu.setAttribute('tabindex', tabindexValue);
      }
    });

    observer.observe(menuButton, { attributes: true, attributeFilter: ['aria-expanded'] });
  }

  // Dark Mode Toggle (Desktop)
  // Note: Theme application and icon syncing on page load is handled in Layout.astro
  const themeToggle = document.getElementById('theme-toggle');

  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      const sunIcon = document.getElementById('sun-icon');
      const moonIcon = document.getElementById('moon-icon');
      const sunIconMobile = document.getElementById('sun-icon-mobile');
      const moonIconMobile = document.getElementById('moon-icon-mobile');

      if (isDark) {
        // Switch to light mode
        html.classList.remove('dark');
        sunIcon?.classList.remove('hidden');
        moonIcon?.classList.add('hidden');
        sunIconMobile?.classList.remove('hidden');
        moonIconMobile?.classList.add('hidden');
        localStorage.setItem('theme', 'light');
      } else {
        // Switch to dark mode
        html.classList.add('dark');
        sunIcon?.classList.add('hidden');
        moonIcon?.classList.remove('hidden');
        sunIconMobile?.classList.add('hidden');
        moonIconMobile?.classList.remove('hidden');
        localStorage.setItem('theme', 'dark');
      }
    });
  }

</script>
