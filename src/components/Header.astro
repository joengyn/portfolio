---
interface Props {
  isIndex?: boolean;
  isAbout?: boolean;
}

const { isIndex, isAbout } = Astro.props;

import { Image } from 'astro:assets';
import Button from './Button.astro';
import logo from '../../public/enso-circle.webp';
import resume from '../../public/resume.pdf';
---

<header
  id='header'
  class='fixed top-0 z-40 w-full bg-white text-black dark:bg-black dark:text-white'
>
  <div class='flex flex-row items-center justify-between p-4 tracking-wider'>
    <!-- Left side: Theme toggle (desktop only) + Name -->
    <div class='flex items-center gap-2'>
      <!-- Dark Mode Toggle (Desktop) -->
      <button
        id='theme-toggle'
        type='button'
        aria-label='Toggle dark mode'
        class='hidden md:flex h-6 w-6 items-center justify-center'
      >
        <!-- Sun Icon (visible in light mode) -->
        <svg
          id='sun-icon'
          class='h-5 w-5'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z'
          ></path>
        </svg>
        <!-- Moon Icon (visible in dark mode) -->
        <svg
          id='moon-icon'
          class='hidden h-5 w-5'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'
          ></path>
        </svg>
      </button>
      <!-- Name -->
      <a class='md:hidden' href='/'>JOE.<br />NGYN</a>
      <a class='hidden md:block' href='/'>JOE.NGYN</a>
    </div>
    <!-- Mobile Menu Button -->
    <button
      type='button'
      class='menu-button space-y-1 md:hidden'
      aria-label='Toggle navigation menu'
      aria-expanded='false'
      aria-controls='mobile-menu'
    >
      <div class='h-1 w-6 bg-black dark:bg-white'></div>
      <div class='h-1 w-6 bg-black dark:bg-white'></div>
      <div class='h-1 w-6 bg-black dark:bg-white'></div>
    </button>
    <!-- Menu Links -->
    <div class='hidden items-center justify-end gap-3 md:flex'>
      <a href='/'>work</a>
      <a href='/about'>about</a>
      <a target='_blank' href={resume}>resume</a>
      <a
        class='flex min-w-12 items-center gap-2 rounded-sm px-4 py-2 border-2 bg-white text-black border-black dark:bg-black dark:text-white dark:border-white text-[12px] font-bold uppercase tracking-widest'
        href='mailto:joe.ngyn7@gmail.com'
      >
        Contact
      </a>
    </div>
    <!--  Logo -->
    <div class='absolute inset-0 z-[-1] flex items-center justify-center'>
      <Image
        src={logo}
        alt='logo'
        class='h-10 w-10 opacity-100 dark:invert'
        id='logoHeader'
      />
    </div>
  </div>
  <div class='mx-4 border-t-2 border-slate dark:border-white'></div>
</header>

<style>
  header {
    transition: box-shadow 300ms ease-out, transform 300ms ease-out;
    box-shadow: 0 1px 2px rgba(15, 14, 13, 0.05);
  }

  :global(.dark) header {
    box-shadow: 0 1px 2px rgba(250, 248, 243, 0.05);
  }

  /* Hide header when scrolling down on project pages */
  header.hide-header {
    transform: translateY(-100%);
  }

  /* Regular navigation links (excluding mailto and contact button) */
  header a:not([href^='mailto:']) {
    transition: opacity 200ms ease-out;
    position: relative;
  }

  header a:not([href^='mailto:']):hover {
    opacity: 0.7;
  }

  header a:not([href^='mailto:'])::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: currentColor;
    transition: width 250ms ease-out;
  }

  header a:not([href^='mailto:']):hover::after {
    width: 100%;
  }

  #theme-toggle {
    transition: transform 200ms ease-out;
  }

  #theme-toggle:hover {
    transform: rotate(20deg);
  }

  #theme-toggle:focus-visible {
    outline: 2px solid #1C1A18; /* slate */
    outline-offset: 2px;
    border-radius: 2px;
  }

  .dark #theme-toggle:focus-visible {
    outline-color: #FAF8F3; /* white */
  }

  /* Contact button styling in header */
  header a[href^='mailto:'] {
    transition: all 250ms ease-out !important;
  }

  header a[href^='mailto:']:hover {
    box-shadow: 0 8px 16px rgba(15, 14, 13, 0.15) !important;
    transform: translateY(-2px) !important;
    opacity: 1 !important;
  }

  :global(.dark) header a[href^='mailto:']:hover {
    box-shadow: 0 8px 16px rgba(250, 248, 243, 0.1) !important;
  }

  header a[href^='mailto:']:active {
    transform: scale(0.98) !important;
    box-shadow: 0 2px 4px rgba(15, 14, 13, 0.08) !important;
  }

  :global(.dark) header a[href^='mailto:']:active {
    box-shadow: 0 2px 4px rgba(250, 248, 243, 0.05) !important;
  }
</style>

<script>
  function initializeHeader() {
    // Open Mobile Menu
    const menuButton = document.querySelector('.menu-button');
    const header = document.getElementById('header');

    function toggleMenu() {
      const mobileMenu = document.querySelector('.mobile-menu');
      const menuLink = document.querySelectorAll('.menu-link');
      const menuContact = document.querySelector('.menu-contact');
      const closeMenu = document.getElementById('close-menu');
      const menuOverlay = document.getElementById('menu-overlay');
      const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
      const newExpandedState = !isExpanded;

      // Toggle aria-expanded
      menuButton.setAttribute('aria-expanded', newExpandedState);

      // Update tabindex for menu items based on expanded state
      const tabindexValue = newExpandedState ? '0' : '-1';
      if (menuLink) {
        menuLink.forEach((link) => {
          link.setAttribute('tabindex', tabindexValue);
        });
      }
      if (menuContact) {
        menuContact.setAttribute('tabindex', tabindexValue);
      }
      if (closeMenu) {
        closeMenu.setAttribute('tabindex', tabindexValue);
        // Move focus to close button when opening
        if (newExpandedState) {
          setTimeout(() => closeMenu.focus(), 100);
        }
      }

      // Toggle mobile menu visibility
      if (mobileMenu) {
        if (newExpandedState) {
          // Opening menu - remove inert to make it interactive
          mobileMenu.removeAttribute('inert');
          mobileMenu.classList.remove('translate-x-full');
          if (menuOverlay) {
            menuOverlay.classList.add('menu-open');
          }
          // Disable scroll
          document.body.style.overflow = 'hidden';
        } else {
          // Closing menu - add inert to make it non-interactive
          mobileMenu.setAttribute('inert', '');
          mobileMenu.classList.add('translate-x-full');
          if (menuOverlay) {
            menuOverlay.classList.remove('menu-open');
          }
          // Re-enable scroll
          document.body.style.overflow = '';
        }
      }
    }

    if (menuButton) {
      menuButton.addEventListener('click', () => {
        // Show header when menu button is clicked
        if (header) {
          header.classList.remove('hide-header');
        }
        toggleMenu();
      });

      // Add keyboard support (Enter and Space)
      menuButton.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          // Show header when menu button is activated via keyboard
          if (header) {
            header.classList.remove('hide-header');
          }
          toggleMenu();
        }
      });

      // Monitor aria-expanded changes from MobileMenu and update tabindex
      const observer = new MutationObserver(() => {
        const isOpen = menuButton.getAttribute('aria-expanded') === 'true';
        const tabindexValue = isOpen ? '0' : '-1';
        const menuLink = document.querySelectorAll('.menu-link');
        const menuContact = document.querySelector('.menu-contact');
        const closeMenu = document.getElementById('close-menu');

        if (menuLink) {
          menuLink.forEach((link) => {
            link.setAttribute('tabindex', tabindexValue);
          });
        }
        if (menuContact) {
          menuContact.setAttribute('tabindex', tabindexValue);
        }
        if (closeMenu) {
          closeMenu.setAttribute('tabindex', tabindexValue);
        }
      });

      observer.observe(menuButton, { attributes: true, attributeFilter: ['aria-expanded'] });
    }

    // Dark Mode Toggle (Desktop)
    // Note: Theme application and icon syncing on page load is handled in Layout.astro
    const themeToggle = document.getElementById('theme-toggle');

    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        const html = document.documentElement;
        const isDark = html.classList.contains('dark');
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');
        const sunIconMobile = document.getElementById('sun-icon-mobile');
        const moonIconMobile = document.getElementById('moon-icon-mobile');

        if (isDark) {
          // Switch to light mode
          html.classList.remove('dark');
          sunIcon?.classList.remove('hidden');
          moonIcon?.classList.add('hidden');
          sunIconMobile?.classList.remove('hidden');
          moonIconMobile?.classList.add('hidden');
          localStorage.setItem('theme', 'light');
        } else {
          // Switch to dark mode
          html.classList.add('dark');
          sunIcon?.classList.add('hidden');
          moonIcon?.classList.remove('hidden');
          sunIconMobile?.classList.add('hidden');
          moonIconMobile?.classList.remove('hidden');
          localStorage.setItem('theme', 'dark');
        }
      });
    }

    // Header auto-hide/show on scroll - all pages
    let lastScrollY = 0;
    let scrollTimeout;

    if (header) {
      window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;
        const isMenuOpen = menuButton?.getAttribute('aria-expanded') === 'true';

        // Clear previous timeout
        if (scrollTimeout) {
          clearTimeout(scrollTimeout);
        }

        // Don't hide header if menu is open
        if (isMenuOpen) {
          return;
        }

        // Show header when scrolling up
        if (currentScrollY < lastScrollY) {
          header.classList.remove('hide-header');
        }
        // Hide header when scrolling down (but not at the top)
        else if (currentScrollY > lastScrollY && currentScrollY > 100) {
          header.classList.add('hide-header');
        }

        lastScrollY = currentScrollY;
      }, { passive: true });
    }
  }

  // Initialize on page load
  initializeHeader();

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initializeHeader);
</script>
