---
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description?: string;
  isIndex?: boolean;
  isAbout?: boolean;
}

const {
  title,
  description = "Joe Nguyen - Designer & Engineer passionate about creating intuitive product experiences at the intersection of people and technology.",
  isIndex,
  isAbout
} = Astro.props;

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import MobileMenu from '../components/MobileMenu.astro';
---

<!doctype html>
<html lang='en'>
  <head>
    <ViewTransitions />
    <meta charset='UTF-8' />
    <meta name='description' content={description} />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/enso-circle.svg' />
    <link
      rel='preload'
      href='https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700,800&display=swap'
      as='style'
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <link
      rel='preload'
      href='https://fonts.googleapis.com/css?family=Lato:300,400,500,600,700,800&display=swap'
      as='style'
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <meta name='generator' content={Astro.generator} />
    <title>
      {title}
    </title>
    <slot name="structured-data" />
    <!-- Dark mode script - runs before page render to prevent flash -->
    <script is:inline>
      function applyTheme() {
        const theme = localStorage.getItem('theme') || 'light';
        const isDark = theme === 'dark';

        // Apply dark class to html
        if (isDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }

        // Sync icon visibility for both desktop and mobile
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');
        const sunIconMobile = document.getElementById('sun-icon-mobile');
        const moonIconMobile = document.getElementById('moon-icon-mobile');

        if (isDark) {
          sunIcon?.classList.add('hidden');
          moonIcon?.classList.remove('hidden');
          sunIconMobile?.classList.add('hidden');
          moonIconMobile?.classList.remove('hidden');
        } else {
          sunIcon?.classList.remove('hidden');
          moonIcon?.classList.add('hidden');
          sunIconMobile?.classList.remove('hidden');
          moonIconMobile?.classList.add('hidden');
        }
      }

      // Apply theme immediately
      applyTheme();

      // Also apply theme during view transitions (Astro lifecycle event)
      document.addEventListener('astro:page-load', () => {
        applyTheme();
      });

      // Reinitialize videos after view transitions
      function resetVideos() {
        const videos = document.querySelectorAll('video');
        videos.forEach((video) => {
          // Reset video to beginning and attempt playback
          video.currentTime = 0;
          if (video.autoplay) {
            video.play().catch(() => {
              // If autoplay fails, that's okay
            });
          }
        });
      }

      // Reset videos on page load and after transitions
      resetVideos();
      document.addEventListener('astro:after-swap', resetVideos);
    </script>
    <!-- Google tag (gtag.js) -->
    <script
      is:inline
      src='https://www.googletagmanager.com/gtag/js?id=G-HWYNYW2MP3'></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-HWYNYW2MP3');
    </script>
  </head>
  <body class='bg-white text-black dark:bg-black dark:text-white'>
    <!-- <ScreenCutOverlay client:only="react" /> -->
    <MobileMenu />
    <Header isIndex={isIndex} isAbout={isAbout} />
    <slot />
    <Footer />
  </body>
</html>

<style is:global lang='scss'>
  :root {
    --light: 300;
    --regular: 400;
    --medium: 500;
    --semiBold: 600;
    --bold: 700;
    --extraBold: 800;
  }

  html {
    font-family: 'Lato', 'Montserrat', system-ui, sans-serif;
    margin: 0;
    padding: 0;
  }

  body {
    margin: 0;
    padding: 0;
    color: #0F0E0D; /* black - default text color */
  }

  .dark body {
    color: #FAF8F3; /* white - dark mode text color */
  }

  p {
    font-family: 'Montserrat';
    font-size: 1rem;
    font-weight: var(--regular);
    line-height: 1.75;
    margin-bottom: 2.5rem;
  }

  h2 {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
  }

  /* Ensure headings inherit text color in dark mode */
  .dark h1,
  .dark h2,
  .dark h3,
  .dark h4,
  .dark h5,
  .dark h6 {
    color: #FAF8F3; /* white */
  }

  /* Ensure links are visible in dark mode */
  .dark a {
    color: #FAF8F3; /* white */
  }

  .wrapper {
    padding: 1rem;
    margin: 40px auto;
    max-width: 768px;
  }

  /* Case Study Page Styling */
  .case-study-image {
    margin-bottom: 2.5rem;
  }

  .case-study-image + figcaption {
    margin-bottom: 2.5rem;
  }

  /* Reduce margin-bottom for case-study-images with figcaptions */
  figcaption + p .case-study-image,
  .case-study-image:has(+ figcaption) {
    margin-bottom: 0.5rem;
  }

  .case-study-section {
    margin-bottom: 2.5rem;
  }

  .case-study-list {
    margin-left: 2rem;
    list-style-position: outside;
    list-style-type: disc;
  }

  @media (min-width: 768px) {
    p {
      font-size: 1.125rem;
      font-weight: var(--regular);
      line-height: 1.78;
    }
  }

  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }

  /* Global focus styles for accessibility - warm colors for better aesthetics */
  a:focus-visible,
  button:focus-visible,
  input:focus-visible,
  textarea:focus-visible,
  select:focus-visible {
    outline: 2px solid #1C1A18; /* slate */
    outline-offset: 4px;
    border-radius: 2px;
  }

  /* Additional focus ring for better visibility */
  *:focus-visible {
    outline: 2px solid #1C1A18; /* slate */
    outline-offset: 4px;
    border-radius: 2px;
  }

  /* Dark mode focus styles - warm white outline on dark backgrounds */
  .dark a:focus-visible,
  .dark button:focus-visible,
  .dark input:focus-visible,
  .dark textarea:focus-visible,
  .dark select:focus-visible,
  .dark *:focus-visible {
    outline-color: #FAF8F3; /* white */
  }

  /* White focus outline for elements on dark backgrounds */
  #mobile-menu a:focus-visible,
  #mobile-menu button:focus-visible,
  footer a:focus-visible,
  footer button:focus-visible,
  #modal button:focus-visible,
  .bg-black *:focus-visible {
    outline-color: white;
  }

  /* Active state for buttons */
  button:active {
    transform: scale(0.98);
  }

  /* Global link hover effects */
  p a,
  li a {
    position: relative;
    transition: color 200ms ease-out, text-decoration-color 200ms ease-out, text-decoration-thickness 200ms ease-out;
    text-decoration: underline;
    text-decoration-color: rgba(15, 14, 13, 0.2);
    text-decoration-thickness: 1px;
    text-underline-offset: 4px;
  }

  .dark p a,
  .dark li a {
    text-decoration-color: rgba(250, 248, 243, 0.2);
  }

  p a:hover,
  li a:hover {
    color: #1C1A18;
    text-decoration-color: rgba(15, 14, 13, 1);
    text-decoration-thickness: 2px;
  }

  .dark p a:hover,
  .dark li a:hover {
    color: #FAF8F3;
    text-decoration-color: rgba(250, 248, 243, 1);
  }

  /* Smooth transitions for all interactive elements */
  a,
  button,
  input,
  textarea,
  select {
    transition: all 200ms ease-out;
  }

  /* Depth baseline for cards and containers */
  [data-project-card],
  .banner {
    transition: all 300ms ease-out;
  }
</style>

